// Generated by dts-bundle v0.7.3

export interface LiberappSdkWindow extends Window {
  LiberappSdk: LiberappSdk;
  FBInstant: FBInstant;
}
export const window: LiberappSdkWindow;
export default window;

/**
 * Facebook互換
 */
export type PauseFunction = () => void;
/**
 * Top level namespace for the Instant Games SDK.
 * @see https://developers.facebook.com/docs/games/instant-games/sdk/
 */
export interface FBInstant {
  /**
   * initializeAsyncにより初期化が終わるまで他のAPIは呼び出してはいけません
   * @example
   * ```ts
   * await LiberappSDK.initializeAsync();
   * // この初期化が終わるまで多くのプロパティーはnullを返します
   * // 初期化完了後にアクセスしてください
   * const playerID = LiberappSDK.player.getID();
   * ```
   * @@throws INVALID_OPERATION
   * @returns PromiseがresolveされたらSDKは利用可能になります
   * @see https://developers.facebook.com/docs/games/instant-games/sdk/
   */
  initializeAsync(): Promise<void>;
  /**
   * ゲームの初期ロードが終了してゲームを開始可能になったら呼び出してください
   * 戻り値の Promise が resolve したら、Contextの情報は最新状態になります
   * @@throws INVALID_PARAM
   * @@throws CLIENT_UNSUPPORTED_OPERATION
   * @returns Promiseが解決したらゲームを開始してください
   * @see https://developers.facebook.com/docs/games/instant-games/sdk/
   */
  startGameAsync(): Promise<void>;
  /**
   * 現在のプレイヤーの情報を返します
   * initializedAsyncを呼び出す前に呼び出してはいけません
   * @returns ゲスト利用中の場合は undefined が戻る
   * @see https://developers.facebook.com/docs/games/instant-games/sdk/
   */
  player: Player;
  /**
   * タブがバックグラウンドに回り広告やレコメンデーションが表示された際に呼び出すコールバックを指定します
   * @param func タブがバックグラウンドに回り広告やレコメンデーションが表示された際に呼び出すコールバック
   * @example
   * ```ts
   * FBInstant.onPause(() => {
   *  // タブがバックグラウンドに回り
   *  // 広告やレコメンデーションが表示された際に
   *  // 呼び出されます
   * });
   * ```
   * @see https://developers.facebook.com/docs/games/instant-games/sdk/
   */
  onPause(func: PauseFunction): void;
  /**
   * ゲームを終了させます
   * @see https://developers.facebook.com/docs/games/instant-games/sdk/
   */
  quit(): void;
  /**
   * アプリケーションに紐づく指定した名前のリーダーボードを取得する
   * @param name リーダーボードの名前
   * @example
   *
   * ```ts
   * const leaderboard = await = LiberappSDK.getLeaderboardAsync('strong-weapon-leaderboard');
   * onsole.log(leaderboard.getName()); // 'strong-weapon-leaderboard'
   * ```
   * @throws LEADERBOARD_NOT_FOUND
   * @throws NETWORK_FAILURE
   * @throws CLIENT_UNSUPPORTED_OPERATION
   * @throws INVALID_OPERATION
   * @throws INVALID_PARAM
   * @returns A promise that resolves with the matching leaderboard, rejecting if one is not found.
   */
  getLeaderboardAsync(name: string): Promise<Leaderboard>;
}

/**
 * Facebook非互換
 */
export type ResumeFunction = () => void;
/**
 * FBInstantには存在しないLiberappSDK独自のAPIです
 */
export interface LiberappSdk extends FBInstant {
  /**
   * ゲームの起動ではなくプレイ回数を計測します
   * FBInstantには存在しないLiberappSDK独自のAPIです
   * このメソッドが呼び出された後計測処理はバックグラウンドで行われます
   * ```ts
   * LiberappSdk.startSession();
   * ```
   */
  startSession(): void;
  /**
   * 自動で表示された広告やレコメンデーションのモーダルが閉じた時に呼び出されますコールバックを設定します
   *
   * @param func 自動で表示された広告やレコメンデーションのモーダルが閉じた時に呼び出したいコールバック
   * @example
   * ```ts
   * await LiberappSdk.onPause(() => {
   *    // タブがバックグラウンドに回り
   *    // 広告やレコメンデーションが表示された際に
   *    // 呼び出されます
   * });
   * await LiberappSdk.onResume(() => {
   *    // 自動で表示された広告やレコメンデーションのモーダルが閉じた時に呼び出されます
   * });
   * ```
   * @see https://developers.facebook.com/docs/games/instant-games/sdk/
   */
  onResume(func: ResumeFunction): void;
  /**
   * デバッグ環境でテストする場合に利用する
   * applicationKey, useAkey, accesstTokenは、QueryStringで引き渡す
   */
  enableDebug(): void;
}

export interface Player extends LeaderboardPlayer, Data, Stats {
}

/**
 * An Instant Game leaderboard
 */
export interface Leaderboard {
  /**
   * リーダーボード名
   */
  getName(): string;
  /**
   * Fetches the total number of player entries in the leaderboard.
   * @throws NETWORK_FAILURE
   * @throws RATE_LIMITED
   * @returns ユーザー数
   */
  getEntryCountAsync(): Promise<number>;
  /**
   * Updates the player's score.
   * If the player has an existing score, the old score will only be replaced
   * if the new score is better than it.
   * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.
   * @param score The new score for the player. Must be a 64-bit integer number.
   * @param extraData Metadata to associate with the stored score. Must be less than 2KB in size.
   * @returns Resolves with the current leaderboard entry for the player after the update.
   * @example
   * ```ts
   * const leaderboard = await Liberapp.getLeaderboardAsync('default-leaderboard');
   * const entry = await leaderboard.setScoreAsync(1234, '{ bike: "mama", level: 3}');
   * console.log(entry.getScore()); // 1234
   * console.log(entry.getExtraData()); // '{ bike: "mama", level: 3}'
   * ```
   * @throws LEADERBOARD_WRONG_CONTEXT
   * @throws NETWORK_FAILURE
   * @throws INVALID_PARAM
   * @throws INVALID_OPERATION
   * @throws RATE_LIMITED
   */
  setScoreAsync(score: number, extraData?: string): Promise<LeaderboardEntry>;
  /**
   * このリーダーボード上でのプレイヤーのスコアを取得します
   * もしプレイヤーがスコアを送信していなければ nullを戻します
   *
   * @throws NETWORK_FAILURE
   * @throws INVALID_OPERATION
   * @throws RATE_LIMITED
   */
  getPlayerEntryAsync(): Promise<LeaderboardEntry | null>;
  /**
   * Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.
   * @param count The number of entries to attempt to fetch from the leaderboard. Defaults to 10 if not specified.
   * Currently, up to a maximum of 100 entries may be fetched per query.
   * @param offset The offset from the top of the leaderboard that entries will be fetched from.
   * @example
   * ```ts
   * const leaderboard = await LiberappSDK.getLeaderboardAsync('default-leaderboard');
   * const entries = await leaderboard.getEntriesAsync();
   * console.log(entries.length); // 10
   * console.log(entries[0].getRank()); // 1
   * console.log(entries[0].getScore()); // 42
   * console.log(entries[1].getRank()); // 2
   * console.log(entries[1].getScore()); // 40
   * ```
   *
   * ```ts
   * const leaderboard = await LiberappSDK.getLeaderboardAsync('default-leaderboard');
   * const entries = await leaderboard.getEntriesAsync();
   * console.log(entries.length); // 5
   * console.log(entries[0].getRank()); // 4
   * console.log(entries[0].getScore()); // 34
   * console.log(entries[1].getRank()); // 5
   * console.log(entries[1].getScore()); // 31
   * ```
   * @returns Resolves with the leaderboard entries that match the query.
   * @throws NETWORK_FAILURE
   * @throws RATE_LIMITED
   */
  getEntriesAsync(count: number, offset: number): Promise<LeaderboardEntry[]>;
}

export interface LeaderboardPlayer {
  getName(): string;
  getPhoto(): string;
  getID(): string;
}

export type RawData = Record<string, any>;
/**
 * An Instant Game leaderboard
 */
export interface Data {
  /**
   * 現在のプレーヤーの指定されたクラウドストレージからデータを取得します。
   * @param keys データを取得するためのユニークなキーの配列。
   * @returns 引数で指定されたキーとペアとなる値が存在する場合、そのキーを含んだオブジェクトを返します。
   * @throws INVALID_PARAM
   * @throws NETWORK_FAILURE
   * @throws CLIENT_UNSUPPORTED_OPERATION
   */
  getDataAsync(keys: string[]): Promise<RawData>;
  /**
   * 現在のプレイヤーの指定クラウドストレージに保存するデータを設定します。ゲームでは、ユニークなプレイヤーごとに最大1MBのデータを保存することができます。
   * @pram data クラウド・ストレージに保持されるべきキーと値のペアのセットを含むオブジェクト。オブジェクトにはシリアライズ可能な値のみを含める必要があります。シリアライズ不可能な値を含むと、変更全体が拒否されます。
   * @returns 現在のプレイヤーの指定クラウドストレージに保存するデータを設定します。ゲームでは、ユニークなプレイヤーごとに最大1MBのデータを保存することができます。
   * @throws INVALID_PARAM
   * @throws NETWORK_FAILURE
   * @throws PENDING_REQUEST
   * @throws CLIENT_UNSUPPORTED_OPERATION
   */
  setDataAsync(data: RawData): Promise<void>;
  /**
   * プレイヤーデータに変更があった場合、指定したクラウドストレージに即座にフラッシュします。
   * この機能はコストがかかるため、主にゲーム側で即時に永続化する必要があるクリティカルな変更に使用します。
   * 重要でない変更は、バックグラウンドで永続化するためにプラットフォームに依存する必要があります。
   * 注: この関数の結果が保留されている間、player.setDataAsyncへの呼び出しは拒否されます。
   * @throws INVALID_PARAM
   * @throws NETWORK_FAILURE
   * @throws PENDING_REQUEST
   * @Throws CLIENT_UNSUPPORTED_OPERATION
   * @returns 変更が正常に持続した場合に解決し、保存に失敗した場合に拒否する約束。
   */
  flushDataAsync(): Promise<void>;
}

export type RawStats = Record<string, number>;
/**
 * An Instant Game leaderboard
 */
export interface Stats {
  /**
   * 現在のプレーヤーの指定されたクラウドストレージからデータを取得します。
   * @param keys データを取得するためのユニークなキーの配列。
   * @returns 引数で指定されたキーとペアとなる値が存在する場合、そのキーを含んだオブジェクトを返します。
   * @throws INVALID_PARAM
   * @throws NETWORK_FAILURE
   * @throws CLIENT_UNSUPPORTED_OPERATION
   */
  getStatsAsync(keys: string[]): Promise<RawStats>;
  /**
   * 現在のプレイヤーの指定クラウドストレージに保存するデータを設定します。ゲームでは、ユニークなプレイヤーごとに最大1MBのデータを保存することができます。
   * @pram data クラウド・ストレージに保持されるべきキーと値のペアのセットを含むオブジェクト。オブジェクトにはシリアライズ可能な値のみを含める必要があります。シリアライズ不可能な値を含むと、変更全体が拒否されます。
   * @returns 現在のプレイヤーの指定クラウドストレージに保存するデータを設定します。ゲームでは、ユニークなプレイヤーごとに最大1MBのデータを保存することができます。
   * @throws INVALID_PARAM
   * @throws NETWORK_FAILURE
   * @throws PENDING_REQUEST
   * @throws CLIENT_UNSUPPORTED_OPERATION
   */
  setStatsAsync(stats: RawStats): Promise<void>;
  /**
   * プレイヤーデータに変更があった場合、指定したクラウドストレージに即座にフラッシュします。
   * この機能はコストがかかるため、主にゲーム側で即時に永続化する必要があるクリティカルな変更に使用します。
   * 重要でない変更は、バックグラウンドで永続化するためにプラットフォームに依存する必要があります。
   * 注: この関数の結果が保留されている間、player.setDataAsyncへの呼び出しは拒否されます。
   * @throws INVALID_PARAM
   * @throws NETWORK_FAILURE
   * @throws PENDING_REQUEST
   * @Throws CLIENT_UNSUPPORTED_OPERATION
   * @returns 変更が正常に持続した場合に解決し、保存に失敗した場合に拒否する約束。
   */
  incrementStatsAsync(stats: ApplicationStatsDto): Promise<ApplicationStatsDto>;
}

/**
 * A score entry for an Instant Game leaderboard
 */
export interface LeaderboardEntry {
  /**
   * Gets the score associated with the entry.
   * @example
   * ```ts
   * const entry = await leaderboard.setScoreAsync(2020);
   * console.log(entry.getScore()); // 2020
   * ```
   * @returns Returns an integer score value.
   */
  getScore(): number;
  /**
   * Gets the score associated with the entry, formatted with the score format associated with the leaderboard.
   * @example
   * ```ts
   * const entry = leaderboard.setScoreAsync(1234);
   * console.log(entry.getFormattedScore()); // '12.34 meters'
   * ```
   * @returns Returns a formatted score.
   */
  getFormattedScore(): string;
  /**
   * Gets the timestamp of when the leaderboard entry was last updated.
   * @returns Returns a Unix timestamp.
   */
  getTimestamp(): number;
  /**
   * Gets the rank of the player's score in the leaderboard.
   * @returns Returns the entry's leaderboard ranking.
   */
  getRank(): number;
  /**
   * スコアに関連付けられたペイロードを取得します。
   * @returns スコアに関連付けられたペイロード
   */
  getExtraData(): string | null;
  /**
   * Gets information about the player associated with the entry.
   * @example
   * ```ts
   * const entry = leaderboard.setScoreAsync(9876);
   * console.log(entry.getPlayer().getName()); // Taro Suzuki
   * ```
   */
  getPlayer(): LeaderboardPlayer;
}

export interface ApplicationStatsDto {
  [key: string]: number;
}

